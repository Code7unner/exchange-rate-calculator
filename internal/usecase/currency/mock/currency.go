// Code generated by MockGen. DO NOT EDIT.
// Source: currency.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/code7unner/exchange-rate-calculator/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockcurrencyRepo is a mock of currencyRepo interface.
type MockcurrencyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockcurrencyRepoMockRecorder
}

// MockcurrencyRepoMockRecorder is the mock recorder for MockcurrencyRepo.
type MockcurrencyRepoMockRecorder struct {
	mock *MockcurrencyRepo
}

// NewMockcurrencyRepo creates a new mock instance.
func NewMockcurrencyRepo(ctrl *gomock.Controller) *MockcurrencyRepo {
	mock := &MockcurrencyRepo{ctrl: ctrl}
	mock.recorder = &MockcurrencyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcurrencyRepo) EXPECT() *MockcurrencyRepoMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method.
func (m *MockcurrencyRepo) GetExchangeRate(ctx context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockcurrencyRepoMockRecorder) GetExchangeRate(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockcurrencyRepo)(nil).GetExchangeRate), ctx, from, to)
}

// UpdateExchangeRate mocks base method.
func (m *MockcurrencyRepo) UpdateExchangeRate(ctx context.Context, er *entity.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchangeRate", ctx, er)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExchangeRate indicates an expected call of UpdateExchangeRate.
func (mr *MockcurrencyRepoMockRecorder) UpdateExchangeRate(ctx, er interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchangeRate", reflect.TypeOf((*MockcurrencyRepo)(nil).UpdateExchangeRate), ctx, er)
}

// Upsert mocks base method.
func (m *MockcurrencyRepo) Upsert(ctx context.Context, er *entity.ExchangeRate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, er)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockcurrencyRepoMockRecorder) Upsert(ctx, er interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockcurrencyRepo)(nil).Upsert), ctx, er)
}

// MockfastForexRepo is a mock of fastForexRepo interface.
type MockfastForexRepo struct {
	ctrl     *gomock.Controller
	recorder *MockfastForexRepoMockRecorder
}

// MockfastForexRepoMockRecorder is the mock recorder for MockfastForexRepo.
type MockfastForexRepoMockRecorder struct {
	mock *MockfastForexRepo
}

// NewMockfastForexRepo creates a new mock instance.
func NewMockfastForexRepo(ctrl *gomock.Controller) *MockfastForexRepo {
	mock := &MockfastForexRepo{ctrl: ctrl}
	mock.recorder = &MockfastForexRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfastForexRepo) EXPECT() *MockfastForexRepoMockRecorder {
	return m.recorder
}

// FetchOne mocks base method.
func (m *MockfastForexRepo) FetchOne(ctx context.Context, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOne", ctx, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOne indicates an expected call of FetchOne.
func (mr *MockfastForexRepoMockRecorder) FetchOne(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOne", reflect.TypeOf((*MockfastForexRepo)(nil).FetchOne), ctx, from, to)
}
